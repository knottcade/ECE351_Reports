%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% LaTeX Template: Project Modified (v 0.2) by jluo
%
% Original Source: http://www.howtotex.com
% Date: February 2019
% 
% This is a title page template which be used for articles & reports.
% 
% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\documentclass[12pt]{report}
\usepackage[a4paper]{geometry}
\usepackage[myheadings]{fullpage}
\usepackage{fancyhdr}
\usepackage{lastpage}
\usepackage{graphicx, wrapfig, setspace, booktabs}
\usepackage[T1]{fontenc}
\usepackage[font=small, labelfont=bf]{caption}
\usepackage{fourier}
\usepackage[protrusion=true, expansion=true]{microtype}
\usepackage[english]{babel}
\usepackage{sectsty}
\usepackage{url, lipsum}
\usepackage{tgbonum}
\usepackage{hyperref}
\usepackage{xcolor}
\usepackage{listings}
\usepackage{color}
\usepackage{float}
 
\definecolor{codegreen}{rgb}{0,0.6,0}
\definecolor{codegray}{rgb}{0.5,0.5,0.5}
\definecolor{codepurple}{rgb}{0.58,0,0.82}
\definecolor{backcolour}{rgb}{0.95,0.95,0.92}
 
\lstdefinestyle{mystyle}{
    backgroundcolor=\color{backcolour},   
    commentstyle=\color{codegreen},
    keywordstyle=\color{magenta},
    numberstyle=\tiny\color{codegray},
    stringstyle=\color{codepurple},
    basicstyle=\footnotesize,
    breakatwhitespace=false,         
    breaklines=true,                 
    captionpos=b,                    
    keepspaces=true,                 
    numbers=left,                    
    numbersep=5pt,                  
    showspaces=false,                
    showstringspaces=false,
    showtabs=false,                  
    tabsize=2
}
 
\lstset{style=mystyle}

\newcommand{\HRule}[1]{\rule{\linewidth}{#1}}
\onehalfspacing
\setcounter{tocdepth}{5}
\setcounter{secnumdepth}{5}



%-------------------------------------------------------------------------------
% HEADER & FOOTER
%-------------------------------------------------------------------------------
\pagestyle{fancy}
\fancyhf{}
\setlength\headheight{15pt}
\fancyhead[L]{\thepage}
\fancyhead[R]{Knott}
%\fancyfoot[R]{Page \thepage\ of \pageref{LastPage}}
%-------------------------------------------------------------------------------
% TITLE PAGE
%-------------------------------------------------------------------------------

\begin{document}
{\fontfamily{cmr}\selectfont
\title{ \LARGE\textsc{ECE 351 Sect. 51 \\ Lab 4}
		\\ [2.0cm]
		\HRule{0.5pt} \\
		\LARGE \textbf{\uppercase{4}
		\HRule{0.5pt} \\ [0.5cm]
		\normalsize \today \vspace*{5\baselineskip}}
		}

\date{}

\author{
		Cade Knott\\}

\maketitle
\tableofcontents
\newpage

%-------------------------------------------------------------------------------
% Section title formatting
\sectionfont{\scshape}
%-------------------------------------------------------------------------------

%-------------------------------------------------------------------------------
% BODY
%-------------------------------------------------------------------------------

\section{Introduction}
The goal for this lab was to practice more with using our convolution function from last week, but instead to compute step responses. This included modeling how transfer functions react to a step response, in this case our user defined step function. With this, we can easily model complex step responses using the code we develop.
%\newpage

\section{Equations}
Given equations for functions:

$$h_1(t)= exp(2t)*u(1 - t)$$
$$h_2(t)= u(t - 2) - u(t - 6)$$
$$h3(t)= cos(\omega t) u(t)$$

Calculation for integral 1:

$$y_1(t) = h_1(t) convolved w/u(t) =$$ $$\int_{-\infty}^{\infty}e^{2\tau}u(1-\tau)u(t-\tau)d\tau 
= \int_{-\infty}^{t}e^{2\tau}u(1-\tau)d\tau = \int_{-\infty}^{t}e^{2\tau}u(1-\tau)d\tau $$
$$+ \int_{-\infty}^{t}e^{2\tau}u(\tau-1)d\tau 
= \int_{-\infty}^{t}e^{2\tau}d\tau + \int_{-\infty}^{1}e^{2\tau}d\tau =$$
\newline
$$y_1(t) = \frac{1}{2}[e^{2t}u(1-t) +e^2u(t-1)]$$

Calculation for integral 2:

$$y_2(t) = h_2(t) convolved w/u(t) =$$
$$\int_{-\infty}^{\infty}[u(t-2)-(u(\tau-6)]u(t-\tau)d\tau = \int_{-\infty}^{t}[u(\tau-2)-u(\tau-6)]d\tau$$
$$ = \int_{-\infty}^{\infty}u(\tau-2)d\tau - \int_{-\infty}^{t}u(\tau-6)d\tau = \int_{2}^{t}d\tau - \int_{6}^{t}d\tau$$
\newline
$$ = y_2(t) = (t-2)u(t-2) - (t-6)u(t-6) = r(t-2 - r(t-6)$$

Calculation for integral 3:

$$y_3(t) = h_3(t) convolved w/u(t) =$$
$$\int_{-\infty}^{\infty}cos(\omega _o \tau)u(\tau)u(t-\tau)d\tau$$
$$ = \int_{-\infty}^{t}cos(\omega _o \tau)u(\tau)d\tau = \int_{0}^{t}cos(\omega _o t)d\tau =$$
\newline
$$y_3(t) = \frac{1}{\omega _o}sin(\omega _o t)u(t)$$

\textbf{Part 1}

This section of the lab began with creating three user defined functions that we could use to convolve in the second part of the lab with our step response function. These three functions model the equations that we were given, using the ramp and step functions that we developed from a couple labs ago, as well as an exp and cos function from numpy. The functions look like this: 
\begin{lstlisting}
def ramp(t, m, start):
    y = np.zeros((len(t),1))
    for i in range(len(t)):
          if t[i] > start:
              y[i] = (m*t[i])-(m*start)
          else:
              y[i] = 0
    return y

def step(t, start):
    y = np.zeros((len(t),1))
    for i in range(len(t)):
          if t[i] > start:
              y[i] = 1    
          else:
              y[i] = 0
    return y
    
def negstep(t, start):
    y = np.zeros((len(t)))
    for i in range(len(t)):
          if t[i] < start:
              y[i] = 1    
          else:
              y[i] = 0
    return y

def func1(t):
    y = np.exp(2*t)*negstep(t, 1)
    return y
    
def func2(t):
    y = step(t, 2) - step(t, 6)
    return y

def func3(t):
    y = np.cos(1.57*t)*step(t, 0)
    return y
    
\end{lstlisting}

As you can see I also had to create a new step function to implement the function $y=u(1-t)$, called negstep which reverses the time domain. Once my three transfer functions were modeled, I set three variables equal to them and began my convolution. 

\noindent\textbf{Part 2}

The convolution for this lab was very similar to last weeks lab. I had to again create another time variable to make up for the size difference in array after convolution. From here I passed my function variables into my convolution function from last week, and plotted all the results. Here is what this code looked like:

\begin{lstlisting}
def my_convolve(f1,f2):
    Nf1 = len(f1)
    Nf2 = len(f2)
    f1Extended = np.append(f1, np.zeros((1,Nf2 - 1)))  #extending length of arrays to equal each other  
    f2Extended = np.append(f2, np.zeros((1,Nf1 - 1)))
    result = np.zeros(f1Extended.shape)
    for i in range(Nf2 + Nf1 - 2):
        result[i] = 0
        for j in range(Nf1):
            if(i - j + 1 > 0):
                try:
                    result[i] = result[i] + f1Extended[j]*f2Extended[i - j +1] #
                except:
                    print(i,j)
    return result
    
c1 = my_convolve(y1,y4)

c2 = my_convolve(y2,y4)

c3 = my_convolve(y3,y4)

tconv = np.arange(2*t[0], 2*t[len(t)-1]+steps, steps)
\end{lstlisting}

This code look very similar to my code from last week, but now I am giving the function different values to compute. After this I moved onto plotting the hand calculated convolution integrals. This included creating three new functions as seen below:

\begin{lstlisting}
def integral1(t):
    y = 0.5*((np.exp(2*t)*negstep(t, 1))+(np.exp(2)*step(t, 1)))
    return y
    
def integral2(t):
    y = ramp(t, 1, 2)-ramp(t, 1, 6)-ramp(t, 1, 12)+ramp(t, 1, 16)
    return y

def integral3(t):
    y = (1/1.57)*np.sin(1.57*t)*step(t, 0)
    return y

y5 = integral1(t)

y6 = integral2(t)

y7 = integral3(t)
\end{lstlisting}

As you can see, I created my functions just as I created the first user defined functions from this lab, calling my other functions as needed. Then, I plotted the results to confirm the accuracy of my hand calculated integrals. 

\section{Results} 
\textbf{Part 1}

The following is the single figure that shows my first three user defined functions plotted in three different subplots:

\begin{figure}[H]
    \centering
    \includegraphics[width=15cm]{func1_3.png}
\end{figure}

As you can see from the plot, the functions perfectly describe the equations we were given at the beginning of the lab handout.

\noindent \textbf{Part 2}

This next part shows the results of my step responses. This first figure is the step response to function 1:

\begin{figure}[H]
    \centering
    \includegraphics[width=15cm]{stepresponse1.png}
\end{figure}

This plot shows an accurate step response for our first function, as it pops up at $t=0$, then begins to decay back to zero. The next plot was for the second function step response:

\begin{figure}[H]
    \centering
    \includegraphics[width=15cm]{stepresponse2.png}
\end{figure}

This again shows an accurate convolution of my step function and function 2, as the original step is spread out as it is integrated with the step function. Finally, our last step response for function 3:

\begin{figure}[H]
    \centering
    \includegraphics[width=15cm]{stepresponse3.png}
\end{figure}

This last plot again reflects the functionality, and accuracy of my convolution function in calculating step responses. And for the last part, we verified our plots by plotting out our hand calculated integrals that can be seen here:

\begin{figure}[H]
    \centering
    \includegraphics[width=15cm]{integrals.png}
\end{figure}

As you can see, the plots do not match up completely, but are very close. This is because our integral functions stop evaluating after time $t=10$, while the convolution function continues to integrate past that point. Once this was complete, the lab was as well. 

\section{Error Analysis}
I am still finding a hard time with defining our t variable, as matplotlib is very picky about array sizes when plotting. For this lab, I had to create a couple different time variables to get my plots to look correctly, or to plot at all. Just trying to use my standard t that I initially defined, by code would refuse to plot my functions, and would throw error messages based on the size of my arrays that I was handing in. From these messages and with help from peers, I was able to define a t variable that matched the size of the arrays I was handing into my plots, and I ended up with an appropriate result. This is an area where I still need practice, but I am sure that will not be and issue as I have plenty of labs left to practice. 

\section{Questions}
\begin{enumerate}
    \item Leave any feedback on the clarity of the expectations, instructions, and deliverables here.
    
    I thought that the clarity of this lab was good, it was short and got directly to the point of what we were supposed to do. The deliverables were once again laid out very nicely, with every expected lab report item noted. 
\end{enumerate}

\section{Conclusion}

This was an excellent lab to continue practicing with our convolution function, and better understand the topics we are covering in class. I am getting much more used to using spyder and troubleshooting my code, as there is a lot of troubleshooting that goes into the lab. I feel that my learning has been enhanced as well, as it takes more understanding than usual to be able to translate these lecture operations into code language. I look forward to practicing more lecture topics in future labs.  
https://github.com/knottcade


%-------------------------------------------------------------------------------
%REFERENCES
%-------------------------------------------------------------------------------
%\newpage 
%\section{References}

%\textit{Inserting Images. (n.d.). Retrieved from %https://www.overleaf.com/learn/latex/Inserting_Images}
\end{document}

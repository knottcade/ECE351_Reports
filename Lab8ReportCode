%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% LaTeX Template: Project Modified (v 0.2) by jluo
%
% Original Source: http://www.howtotex.com
% Date: February 2019
% 
% This is a title page template which be used for articles & reports.
% 
% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\documentclass[12pt]{report}
\usepackage[a4paper]{geometry}
\usepackage[myheadings]{fullpage}
\usepackage{fancyhdr}
\usepackage{lastpage}
\usepackage{graphicx, wrapfig, setspace, booktabs}
\usepackage[T1]{fontenc}
\usepackage[font=small, labelfont=bf]{caption}
\usepackage{fourier}
\usepackage[protrusion=true, expansion=true]{microtype}
\usepackage[english]{babel}
\usepackage{sectsty}
\usepackage{url, lipsum}
\usepackage{tgbonum}
\usepackage{hyperref}
\usepackage{xcolor}
\usepackage{listings}
\usepackage{color}
\usepackage{float}
 
\definecolor{codegreen}{rgb}{0,0.6,0}
\definecolor{codegray}{rgb}{0.5,0.5,0.5}
\definecolor{codepurple}{rgb}{0.58,0,0.82}
\definecolor{backcolour}{rgb}{0.95,0.95,0.92}
 
\lstdefinestyle{mystyle}{
    backgroundcolor=\color{backcolour},   
    commentstyle=\color{codegreen},
    keywordstyle=\color{magenta},
    numberstyle=\tiny\color{codegray},
    stringstyle=\color{codepurple},
    basicstyle=\footnotesize,
    breakatwhitespace=false,         
    breaklines=true,                 
    captionpos=b,                    
    keepspaces=true,                 
    numbers=left,                    
    numbersep=5pt,                  
    showspaces=false,                
    showstringspaces=false,
    showtabs=false,                  
    tabsize=2
}
 
\lstset{style=mystyle}

\newcommand{\HRule}[1]{\rule{\linewidth}{#1}}
\onehalfspacing
\setcounter{tocdepth}{5}
\setcounter{secnumdepth}{5}



%-------------------------------------------------------------------------------
% HEADER & FOOTER
%-------------------------------------------------------------------------------
\pagestyle{fancy}
\fancyhf{}
\setlength\headheight{15pt}
\fancyhead[L]{\thepage}
\fancyhead[R]{Knott}
%\fancyfoot[R]{Page \thepage\ of \pageref{LastPage}}
%-------------------------------------------------------------------------------
% TITLE PAGE
%-------------------------------------------------------------------------------

\begin{document}
{\fontfamily{cmr}\selectfont
\title{ \LARGE\textsc{ECE 351 Sect. 51 \\ Lab 8}
		\\ [2.0cm]
		\HRule{0.5pt} \\
		\LARGE \textbf{\uppercase{8}
		\HRule{0.5pt} \\ [0.5cm]
		\normalsize \today \vspace*{5\baselineskip}}
		}

\date{}

\author{
		Cade Knott\\}

\maketitle
\tableofcontents
\newpage

%-------------------------------------------------------------------------------
% Section title formatting
\sectionfont{\scshape}
%-------------------------------------------------------------------------------

%-------------------------------------------------------------------------------
% BODY
%-------------------------------------------------------------------------------

\section{Introduction}
The goal for this lab was to gain more practice with using fourier series to model periodic time domain signals. We have been learning this method in class, but this will be our first experience with coding and fourier series. The procedure for this method of approximating signals is tedious by hand, but with the help of python we should be able to produce a much more efficient process. The idea is to use summations of sine or cosine signals to create an output that is very close to a pulse type signal, or whatever signal we are given. From there, we can plot our outputs to see how close our approximations actually are to the original signal. 

\section{Equations}

Equations found from prelab:

$$a_k = \frac{2}{k\pi}sin(k\pi)$$
$$b_k = \frac{2}{k\pi} * [1 - cos(k\pi)]$$

With a little thought, we know that $k = 0, 1$ for the first two terms of $a_k$, which will make the term equal to zero, so we can essentially ignore $a_k$ as it will only be zero. $b_k$ however, will have an actual value.

\section{Methodology}

\textbf{Part 1}

To begin this lab, I started by creating defined functions to implement the equations that I had found for $a_k$ and $b_k$ in the prelab. The code for these functions can be seen here:

\begin{lstlisting}
def ak(k):
    y = 0
    if k == 0:
        return y
    else:
        y = (2/(k*np.pi))*np.sin(k*np.pi)
    return y

def bk(k):
    y = (2/(k*np.pi))*(1-np.cos(k*np.pi))
    return y
\end{lstlisting}

These functions mostly follow the exact equations that I found, but for $a_k$ I had to include a conditional statement to avoid a division by zero error, plus I already knew that it should evaluate to zero anyways. After this, I computed the results for the first two terms for $a_k$, and the first three terms for $b_k$ by calling my functions and passing in the correct value for k. The printed results for these terms can be found in Appendix 1 of this report. 

Once I had determined these terms, I moved onto writing my code to actually perform the calculation of this fourier series, and print the output as I add more terms to my summation. This allows us to see the actual progress of the fourier series and how it becomes more accurate as we add more terms. The code for this can be seen here:

\begin{lstlisting}
for h in [1,2]: #figure numbers
    for i in ([1 + (h - 1)*3, 2 + (h - 1)*3, 3 + (h - 1)*3]): #subplots
        for k in np.arange(1, N[i - 1] + 1):                  #fourier
            b = 2/(k*np.pi)*(1 - np.cos(k*np.pi))
            x = b*np.sin(k*(2*np.pi/T)*t)
            y += x
        plt.figure(h, figsize=(12,8))
        plt.subplot(3,1,(i-1)%3+1)
        plt.plot(t,y)
        plt.grid()
        plt.ylabel('N = %i' %N[i-1])
        if i == 1 or i == 4:
            plt.title('Fourier Series')
        if i == 3 or i == 6:
            plt.xlabel('t[s]')
            plt.show()
        y = 0
        
\end{lstlisting}

This fourier series approximation consists of three nested for loops. This was necessary in order to create two figures with three separate subplots per figure. The first for loop is responsible for creating the two different figures, and the second loop is responsible for creating the corresponding subplots. The final for loop actually computes the fourier series, by computing b, multiplying the value by our equation, and then adding it to the value of y. It was set to plot the output at each of the different specified N values, so I ended up with six different plots showing the output of my fourier series approximation. These plots can be seen in the following results section. With this complete, so was the lab.

\section{Results} 
\textbf{Part 1}

The following is the six plots my code generated, showing my approximation of the time domain signal using a fourier series. Each plot corresponds to a different amount of terms in the series, which accounts for the discrepancy in precision of my approximations.

\begin{figure}[H]
    \centering
    \includegraphics[width=15cm]{fig1.png}
\end{figure}

\begin{figure}[H]
    \centering
    \includegraphics[width=15cm]{fig2.png}
\end{figure}

As can be seen, the approximation becomes much closer to the actual graph as N increases, which is expected. It starts out looking like a very normal sine function, and then as we add terms it ends up looking a lot like the square wave. The fourier series approximation is not perfect, but it is very close. 

\section{Questions}
\begin{enumerate}
    \item Is x(t) an even or an odd function? Explain why.
    
    x(t) is an odd function, which can be determined a couple different ways. The easiest for me is to look at the graph, since we know what sine and cosine functions look like. Cosine is symmetrical about the y axis, whereas sine is not. Just by looking at the graph for x(t), I can see that it looks similar to a sine function, as it is not symmetrical and resembles the structure of a sine function. However, if we hadn't started with the graph, the other way to check is to compare the equation for $X_n$ to its inverse; so if it is even, then $X_n = X_{-n}$, and if it is odd, then $X_n = -X_{-n}$.
    
    \item Based on your results from Task 1, what do you expect the values of a2, a3, . . . , an to be? Why?
    
    I expect the values of $a_k$ to always be zero, because the equation includes $sin(k\pi)$. Sine evaluated at any pi will always be zero, so the term will also always be zero.
    
    \item How does the approximation of the square wave change as the value of N increases? In what way does the Fourier series struggle to approximate the square wave?
    
    The approximation becomes closer to the actual wave as N increases. The most difficult part of the square wave to replicate are the points where it jumps up to one, since it technically has an infinite slope. These points where slope is infinite is where the fourier series struggles to to approximate.
    
    \item What is occurring mathematically in the Fourier series summation as the value of N increases?
    
    As N increases, we are simply adding more terms to our summation. If N = 3, then we have three terms to add together, and if N = 15, then we have 15 terms added together. This is why our approximation becomes closer when we add more terms, because each term brings our approximation closer to the actual graph.
    
\end{enumerate}

\section{Conclusion}

This lab made it very evident how useful it is to be able to use the fourier series we have been working with in class, because we can replicate signals just based on their graph. This means that we can create square functions, or any type of function using only sine and cosine functions, which we are very familiar with and have many identities that allow us to modify sine and cosine functions. This makes any signal much more use-able and modifiable, since we can then apply cosine and sine properties to the functions. Overall, this lab was very useful and I look forward to using it to approximate more complicated signals in the future.
\newline https://github.com/knottcade

\newpage
\appendix{Appendix 1}

Printed Results from Task 1:
\newline$a_k(0) =  0$
\newline$a_k(1) =  7.796343665038751e-17$
\newline$b_k(1) =  1.2732395447351628$
\newline$b_k(2) =  0.0$
\newline$b_k(3) =  0.4244131815783876$


%-------------------------------------------------------------------------------
%REFERENCES
%-------------------------------------------------------------------------------
%\newpage 
%\section{References}

%\textit{Inserting Images. (n.d.). Retrieved from %https://www.overleaf.com/learn/latex/Inserting_Images}
\end{document}
